import Imap from 'imap'; 
import { simpleParser } from 'mailparser'; 
import fetchEmails, { FetchedEmail } from '../MailsBox'; 
import { Readable } from 'stream';
import { connect } from 'http2';


jest.mock('imap'); 
jest.mock('mailparser', () => ({
  simpleParser: jest.fn() 
}));


describe('fetchEmails', () => {
  const mockImap = Imap as jest.MockedClass<typeof Imap>;
  
  const mockEmailData = {
    headers: {
      get: jest.fn().mockReturnValueOnce([{ address: 'test@example.com', name: 'Test Sender' }])
        .mockReturnValueOnce('12345')
        .mockReturnValueOnce([{ address: 'recipient@example.com', name: 'Recipient' }])
        .mockReturnValueOnce(undefined)
        .mockReturnValueOnce('Test Subject')
        .mockReturnValueOnce(new Date()),
    },
    body: 'Test email body',
    date: new Date(),
    attachments: [],
  };

  beforeEach(() => {
    jest.clearAllMocks(); // Clear mocks before each test
  });

  it('should fetch emails successfully', async () => {
   

    const mockedImap = {
        connect: jest.fn(),
        once: jest.fn(),
        openBox: jest.fn((path: string, readOnly: boolean, callback: (error: Error | null) => void) => { callback(null); }), // Mock successful box open
        search: jest.fn((criteria: any[], callback: (error: Error | null, results: number[]) => void) => {
          callback(null, [1, 2, 3]); // Mock 3 emails found
        }),
        fetch: jest.fn().mockReturnValue({ 
          on: jest.fn((event: string, listener: (msg: any) => void) => {
            if (event === 'message') {
              // Mock 3 email messages
              for (let i = 1; i <= 3; i++) {
                listener({
                  on: jest.fn((event: string, listener: (stream: Readable) => void) => {
                    if (event === 'body') {
                      // Mock a Readable stream for email body
                      const text = `Email body ${i}`;
                      const readable = Readable.from([Buffer.from(text)]);
                      listener(readable);
                    }
                  })
                });
              }
            } else if (event === 'error') {
              // Mock an error if needed
              // listener(new Error('Fetch error'));
            }
          }),
          once: jest.fn((event: string, listener: () => void) => {
            if (event === 'end') {
              listener(); // Simulate end of fetch
            }
          })
        }),
        end: jest.fn()
      } as unknown as Imap;
    
     
    mockImap.mockImplementationOnce(() => mockedImap);
    const mockSimpleParser = jest.fn().mockImplementation((buffer, callback) => {
      const parsedEmailData = { ...mockEmailData };
      parsedEmailData.body = buffer.toString();
      callback(null, parsedEmailData);
    }); 


    // Call the function under test
    const emails = await fetchEmails('user', 'password', 'host');
    const expectedEmails: FetchedEmail[] = [
      {
        senders: [{ address: 'test@example.com', name: 'Test Sender' }],
        messageId: '12345',
        toReivers: [{ address: 'test@example.com', name: 'Test Sender' }],
        ccReivers: undefined,
        subject: 'Test Subject',
        body: 'Test email body',
        date: mockEmailData.date,
        attachments: [],
      },
    ];

    // Assert that the expected data was received
    expect(emails).toEqual(expectedEmails);
    expect(mockImap).toHaveBeenCalledWith({ user: 'user', password: 'password', host: 'host', port: 993, tls: true });
    expect(mockSimpleParser).toHaveBeenCalled();
  });



  // Add more tests for error cases, different search criteria, etc.
});
